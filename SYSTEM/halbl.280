	title	'Pseudo-Disk I/O Module of CP/M-3 BIOS'
	.z280
	.xlist
	maclib	Z280EQU
	maclib	CPU280
	maclib	OPTIONS
	.list

; 950314 Tilmann Reh

; Treiber f}r Pseudo-Drives. Unterst}tzt werden ein MDrive im CPU280-RAM
; (der gesamte Speicher abz}glich 256k Systemspeicher) als Laufwerk E:,
; eine c't-1MB-RAM-Disk beliebiger Kapazit{t als Laufwerk F:, und eine
; c't-Solid-State-Disk (mit EPROM- oder SRAM-Best}ckung) beliebiger
; Kapazit{t als Laufwerk G:. Bei den c't-Karten wird der Speicherausbau
; anhand der User-Jumper erkannt und der DPB entsprechend angepa~t.

spezial	equ	false		; Option: Spezial-Umbau c't Solid-State 768k

	dseg			; banked

;***********************************************************************
;**           Ansteuerung des MDrive (internes RAM)                   **
;***********************************************************************

; Organisation des MDrive: 256 Sektoren pro Spur (d.h. 32k pro Spur),
; Spuranzahl je nach Speicherausbau 8 (512k), 24 (1M), 56 (2M), 120 (4M).

; Initialisierung: Feststellen der RAM-Gr|~e (NVRAM) und Dimensionieren
; der MDrive-Kapazit{t. Danach Meldung wegen Kapazit{t.
; Falls im Lader: Pr}fen der Directory, ggf. Initialisierung. Einspr}nge
; brauchen nicht gesetzt zu werden, da MDrive immer das erste Laufwerk!

MDrIni:	iopage	BoardP
	in	a,(s$Mem)	; Speicherausbau: Anzahl 512k-Blocks
	ld	h,a		; *256 = Anzahl 2k-Blocks (wenn L=0)
	dec	h
	ld	l,7Fh		; 128 abziehen f}r System, DSM ist Wert-1
	ld	(DPBE+5),hl	; DSM speichern
	cp	1		; (HL = 127/383/895/1919 = 7F/17F/37F/77F)
	jr	nz,MDrIn1
	ld	(DPBE+4),a	; 256k MDrive: EXM = 1 (0 Default, ab 768k)
MDrIn1:	cp	5
	jr	nc,MDrIn3	; }ber 2M RAM: DPBE schon korrekt
	ld	bc,255		; DRM bei 256 Eintr{gen
	ld	de,00F0h	; ALV bei 256 Eintr{gen
	cp	3
	jr	c,MDrIn2	; bis 1M: diese Werte verwenden
	ld	e,c		; }ber 1M: ALV = 00FFh
	inc	b		; DRM = 511
MDrIn2:	ld	(DPBE+7),bc
	ld	(DPBE+9),de	; DRM und ALV in DPB einsetzen
MDrIn3:
    if loader
	jp	DirIni		; Lader: evtl. Directory Init, dann Ende!
    else
	inc	hl
	add	hl,hl		; Kapazit{t in KB
	push	hl
	ld	hl,MDrSgn
PrtSiz:	call	PMsg		; Meldung ausgeben
	pop	hl		; Kapazit{t in KB
	call	SizOut		; ausgeben
	ld	hl,CRLF
	jp	PMsg		; CRLF dahinter, Ende
    endif

; GETADR berechnet physikalische Adresse des zu bearbeitenden Sektors.
; Bit 21 20 19 18 17 16, 15 14 13 12 11 10 09 08, 07 06 05 04 03 02 01 00
; Inh. T  T  T  T  T  T,  T  S  S  S  S  S  S  S,  S  x  x  x  x  x  x  x
; Dazu wird 840000 addiert (Beginn des MDrive hinter 256k System).
; Adre~}bergabe in AHL (24 Bit).

GetAdr:	ld	a,(Track)
	srl	a
	ld	b,a		; Spur /2 ergibt sp{ter 'Bank'
	ld	a,(Sector)
	rra			; sector/2 = Page (CY noch aus Track-Bit 0)
	ld	l,0
	rr	l		; Einschieben in Low-Adr. -> 0 oder 80h
	ld	h,a		; in HL phys. Adresse
	ld	a,b		; in A phys. Bank
	add	a,84h		; phys. Bank des MDrive-Anfangs
	ret

MDrRd:	call	GetAdr		; Phys. Adresse (Quelle)
	ld	(Source),hl
	ld	(Source+2),a	; als Quelle setzen
	call	ClcDMA		; phys. Zieladresse (AHL)
	ld	(Dest),hl
	ld	(Dest+2),a	; phys. Zieladresse speichern
	jr	MDrSet		; DMA in Gang setzen und RET

MDrWr:	call	GetAdr		; phys. Zieladresse berechnen
	ld	(Dest),hl
	ld	(Dest+2),a	; als Ziel setzen
	call	ClcDMA		; phys. Quelladresse (AHL)
	ld	(Source),hl
	ld	(Source+2),a	; phys. Quelladresse speichern

; Descriptor in DMA-Parameterblock einsetzen, DMA starten und Ende.
; Dieser Einsprung und der DMA-PB wird auch von den anderen Treibern genutzt.

MDrSet:	ld	hl,1000000100000000b ; Descriptor: Mem --> Mem, Bytes Cont.
XDrSet:	ld	(Dscrpt),hl
	ld	hl,Xfer
	call	DmaSet		; DMA 3 init --> transfer
	iopage	BusP		; wieder auf Bus-Page schalten
	xor	a		; kein Fehler
	ret

Xfer:	defb	dal3		; DMA 3
Dest:	defs	3
Source:	defs	3
	defw	128		; L{nge: 128 Byte (alle Pseudo-Drives)
Dscrpt:	defs	2

  if loader
    if deutsch
MDrQry:	defz	cr,lf,'MDrive l|schen ? '
    endif
    if english
MDrQry:	defz	cr,lf,'Erase MDrive ? '
    endif
MDrLbl:	defb	20h,'MDRIVE     ',31h,0,0,0
	defw	0,0,0,0,Date,0,Date,0
  else
MDrSgn:	defz	'E: MDrive '	; Meldung in allen Sprachen gleich...
CRLF:	defz	cr,lf
  endif

; Extended Disk Parameter Header & Allocation Vektoren:

DPHE::	defw	0,0,0,0,0,0
	defw	DPBE,0
    if loader
	defw	0,BCB,-1,-1
    else
	defw	ALVE,-2,-1,-2
    endif
	defb	0
	defw	MDrIni,0,MDrRd,MDrWr ; Treiber-Einspr}nge

EBlks	equ	1920		; Maximum (bei 4M Speicherausbau)!
    if not loader
ALVE:	defs	(EBlks+7)/4	; Allocation Vector (2 Bit)
    endif

	cseg			; DPB mu~ resident sein!

DPBE:	defw	256		; 128 byte sec/trk
	defb	4,15		; block shift, mask (2k)
	defb	0		; extent mask
	defw	EBlks-1		; max block number
	defw	1023		; dir entries
	defb	0FFh,0FFh	; dir blocks alloc vec
	defw	8000h		; checksum size
	defw	0		; tracks offset
	defb	0,0		; phys sec shift

	dseg

;***********************************************************************
;**           Ansteuerung der c't-1-MB-RAM-Disk                       **
;***********************************************************************

	if	ctram

; Definition der I/O-Adressen:

ctrBase	equ	5Ch		; Basisadresse
ctrDat	equ	ctrBase		; Datenregister RAM-Floppy
ctrSec	equ	ctrBase+1	; Sektorregister RAM-Floppy
ctrTrk	equ	ctrBase+2	; Spurregister RAM-Floppy
ctrSta	equ	ctrBase+3	; Statusregister RAM-Floppy

; Initialisierung: Feststellen der RAM-Gr|~e (Jumper) und dimensionieren
; der RAM-Disk-Kapazit{t. Danach Meldung wegen Kapazit{t. Bei Fehler
; Drive-Table-Eintrag l|schen und entsprechend melden.

ctrIni:	iopage	BusP
	in	a,(ctrSta)	; RAM-Disk F: auf Existenz pr}fen
	inc	a
	jr	z,KillF		; wenn nicht da: Eintrag l|schen, Meldung
	and	0C0h		; Gr|~enerkennungs-Bits
	rlca
	rlca			; nach ganz rechts schieben
	inc	a		; m|glich: 1..4 Banks best}ckt
	ld	h,a
	ld	l,0		; nach HL als 256..1024
	srl	h
	rr	l		; halbiert: 128..512 = Anzahl 2k-Groups
	dec	hl
	ld	(DPBF+5),hl	; DSM in DPB speichern
	bit	0,h		; (HL = 127/255/383/511 = 7F/FF/17F/1FF)
	jr	nz,ctrIn1
	ld	(DPBF+4),1	; <= 512k : EXM = 1 einsetzen (0 Default)
ctrIn1:
    if loader
	ld	hl,ctrAdr
	ld	de,DrvRd
	ld	bc,8
	ldir			; Adressen f}r DirIni einsetzen
	jp	DirIni		; Lader: evtl. Directory Init, dann Ende!
ctrAdr:	defw	ctrRd,ctrWr,ctrLbl,ctrQry ; Einsprungadressen f}r RAM-Disk
    else
	inc	hl
	add	hl,hl		; Kapazit{t in KB
	push	hl		; auf Stack
	ld	hl,ctrSgn
	jp	PrtSiz		; Meldung und Kapazit{t ausgeben
    endif

KillF:	ld	hl,0
	ld	(DTbl+10),hl	; Eintrag von DPHF l|schen
    if loader
	ret
    else
	ld	hl,ctrBad
	jp	PMsg		; Fehlermeldung und Ende
    endif

; c't-RAM-Floppy: Sektor- und Spurregister vertauscht angesprochen, damit 
; Autosize nur DSM ver{ndern mu~ (wegen Bank-Select durch "Sektor"register).

ctrRd:	iopage	BusP		; externe Karten am ECB-Bus
	ld	a,(Sector)
	out	(ctrTrk),a	; Sektorregister setzen
	ld	a,(Track)
	out	(ctrSec),a	; Spurregister setzen
	ld	hl,ctrDat
	ld	(Source),hl	; RAM-Floppy-Datenport als Quelle
	jp	ctRd		; DMA f}r ECB-Read prog., Ende

ctrWr:	iopage	BusP		; externe Karten am ECB-Bus
	in	a,(ctrSta)	; Statusport RAM-Disk
	and	2
	ret	nz		; WRITE-PROTECTED, Error-Code 2
	ld	a,(Sector)
	out	(ctrTrk),a	; Sektorregister setzen
	ld	a,(Track)
	out	(ctrSec),a	; Spurregister setzen
	ld	hl,ctrDat
	ld	(Dest),hl	; RAM-Floppy-Datenport als Ziel
	jp	ctWr		; DMA f}r ECB-Write prog., Ende

  if loader
    if deutsch
ctrQry:	defz	cr,lf,'RAM-Disk l|schen ? '
    endif
    if english
ctrQry:	defz	cr,lf,'Erase RAM-Disk ? '
    endif
ctrLbl:	defb	20h,'RAM-DISK   ',31h,0,0,0
	defw	0,0,0,0,Date,0,Date,0
  else
ctrSgn:	defz	'F: RAM-Disk '
    if deutsch
ctrBad:	defz	'Fehler: RAM-Disk nicht installiert',cr,lf
    endif
    if english
ctrBad:	defz	'Error: RAM-Disk not installed',cr,lf
    endif
  endif

; Extended Disk Parameter Header & Allocation Vektoren:

DPHF::	defw	0,0,0,0,0,0
	defw	DPBF,0
    if loader
	defw	0,BCB,-1,-1
    else
	defw	ALVF,-2,-1,-2
    endif
	defb	0
	defw	ctrIni,0,ctrRd,ctrWr ; Treiber-Einspr}nge

FBlks	equ	512		; Maximal 512 Blocks = 1 MB
    if not loader
ALVF:	defs	(FBlks+7)/4	; Allocation Vector (2 Bit)
    endif

	cseg

DPBF:	defw	256		; 128 byte sec/trk
	defb	4,15		; block shift, mask (2k)
	defb	0		; extent mask
	defw	FBlks-1		; max block number
	defw	191		; dir entries
	defb	0E0h,0		; dir blocks alloc vec
	defw	8000h		; checksum size
	defw	0		; tracks offset
	defb	0,0		; phys sec shift

	dseg

	endif			; (ctram)

;***********************************************************************
;**           Ansteuerung der c't-Solid-State-Disk                    **
;***********************************************************************

	if	ctsolid

; Definition der Adressen

ctsBase	equ	54h		; Basisadresse
ctsSec	equ	ctsBase		; Sektorregister Solid-State-Floppy
ctsRdD	equ	ctsBase		; Lese-Datenregister Solid-State-Floppy
ctsTrk	equ	ctsBase+1	; Spurregister Solid-State-Floppy
ctsSta	equ	ctsBase+1	; Statusregister Solid-State-Floppy
ctsWrD	equ	ctsBase+2	; Schreib-Datenregister Solid-State-Floppy

; Initialisierung: Feststellen der RAM-Gr|~e (Jumper) und dimensionieren
; der Kapazit{t. Danach Meldung wegen Kapazit{t. Bei Fehler Drive-Table-
; Eintrag l|schen und entsprechend melden.
; Ein Umbau auf 768k (3 Banks je 256k) wird als Option unterst}tzt. Dazu
; m}ssen beide Kapazit{ts-Jumper offengelassen werden.

ctsIni:	iopage	BusP
	in	a,(ctsSta)	; Solid-State-Disk G: auf Existenz pr}fen
	inc	a		; 0/1/2/3  -->  1/2/3/0 in unteren Bits
	jr	z,KillG		; wenn nicht da: l|schen
	and	3		; Gr|~enerkennungs-Bits +1 (64k,128k,256k)
    if spezial
	jr	z,cts768	; beide Original-Bits 1: Spezial-Umbau 768k
    else
	jr	z,KillG		; beide Original-Bits 1 unzul{ssig
    endif
	cp	3
	sbc	a,-1		; --> 1,2,4
	multu	a,64		; --> 64,128,256
    if loader
	dec	hl
	ld	(DPBG+5),hl	; DSM in DPB einsetzen
	ret
    else
	push	hl		; Kapazit{t in KB auf Stack
	dec	hl
	ld	(DPBG+5),hl	; DSM in DPB einsetzen
	ld	hl,ctsSgn
	jp	PrtSiz		; Meldung und Kapazit{t ausgeben
    endif

    if spezial
cts768:	ldw	(DPBG+2),0F04h	; BSH und BLM: 2k-Blocks
	ldw	(DPBG+5),383	; 768k sind 384 Blocks
	ld	(DPBG+7),127	; jetzt 128 DIR-Eintr{ge (ebenfalls 2 Blocks)
      if loader
	ret
      else
	push	768
	ld	hl,ctsSgn
	jp	PrtSiz		; Meldung und Kapazit{t ausgeben
      endif
    endif

KillG:	ld	hl,0
	ld	(DTbl+12),hl	; Eintrag von DPHG l|schen
    if loader
	ret
    else
	ld	hl,ctsBad
	jp	PMsg		; Fehlermeldung und Ende
    endif

; Lesen von Solid-State-Floppy immer m|glich (RAM oder EPROM).

ctsRd:	iopage	busp		; externe Karten am ECB-Bus
	ld	a,(Track)
	out	(ctsTrk),a	; Spurregister setzen
	ld	a,(Sector)
	out	(ctsSec),a	; Sektorregister setzen
	ld	hl,ctsRdD
	ld	(Source),hl	; EPROM-Floppy-Datenport als Quelle

	endif			; (ctsolid)

	if	ctram or ctsolid ; gemeinsame Routine

ctRd:	xor	a
	ld	(Source+2),a	; I/O-Page 00 f}r ECB-Bus
	call	ClcDMA		; Phys. Zieladresse berechnen
	ld	(Dest),hl
	ld	(Dest+2),a	; in DMA-Tabelle einsetzen
	ld	hl,1110000100000000b ; Descriptor: I/O --> MEM, Bytes Cont.
	jp	XDrSet		; DMA setzen/Enable, RETURN

	endif			; (gemeinsame Routine)

	if ctsolid and not loader

; Schreiben auf Solid-State-Floppy nur m|glich bei RAM-Best}ckung

ctsWr:	iopage	busp		; externe Karten am ECB-Bus
	in	a,(ctsSta)	; Statusport lesen
	rrca			; ein Bit rechts schieben
	and	2
	ret	nz		; EPROM-Best}ckung : WRPROT
	ld	a,(Track)
	out	(ctsTrk),a	; Spurregister setzen
	ld	a,(Sector)
	out	(ctsSec),a	; Sektorregister setzen
	ld	hl,ctsWrD
	ld	(Dest),hl	; RAM-Floppy-Datenport als Quelle

	endif			; (ctsolid)

	if	ctram or ctsolid ; gemeinsame Routine

ctWr:	xor	a
	ld	(Dest+2),a	; I/O-Page 00 f}r ECB-Bus
	call	ClcDMA		; Phys. Quelladresse berechnen
	ld	(Source),hl
	ld	(Source+2),a	; in DMA-Tabelle einsetzen
	ld	hl,1000000100001100b ; Descriptor: MEM --> I/O, Bytes Cont.
	jp	XDrSet		; DMA setzen/Enable, RETURN

	endif			; (gemeinsame Routine)

	if	ctsolid

  iff loader
ctsSgn:	defz	'G: Solid-State-Disk '
    if deutsch
ctsBad:	defz	'Fehler: Solid-State-Disk nicht installiert',cr,lf
    endif
    if english
ctsBad:	defz	'Error: Solid-State-Disk not installed',cr,lf
    endif
  endif

; Extended Disk Parameter Header & Allocation Vektoren:

DPHG::	defw	0,0,0,0,0,0
	defw	DPBG,0
    if loader
	defw	0,BCB,-1,-1
	defb	0
	defw	ctsIni,0,ctsRd,0 ; Treiber-Einspr}nge
    else
	defw	ALVG,-2,-1,-2
	defb	0
	defw	ctsIni,0,ctsRd,ctsWr ; Treiber-Einspr}nge
    endif

    if spezial
GBlks	equ	384
    else
GBlks	equ	256
    endif
    if not loader
ALVG:	defs	(GBlks+7)/4	; Allocation Vector (2 Bit)
    endif

; DPBG ausgelegt f}r 256k EPROM/SRAM-Best}ckung.
; (wird f}r Spezial-Umbau 768k bei Installation gepatcht)

	cseg			; DPB mu~ resident sein

DPBG:	defw	256		; 128 byte sec/trk
	defb	3,7		; block shift, mask (1k)
	defb	0		; extent mask
	defw	GBlks-1		; max block number
	defw	63		; dir entries
	defb	0C0h,0		; dir blocks alloc vec
	defw	8000h		; checksum size
	defw	0		; tracks offset
	defb	0,0		; phys sec shift

	dseg

	endif			; (ctsolid)

;***********************************************************************
;**          Initialisierung der RAM-Floppies (nur im Lader)          **
;***********************************************************************

; Allgemeine Initialisierungs-Routine f}r RAM-Disks. Zun{chst wird der
; erste Sektor gelesen und der erste Eintrag darin auf das Directory
; Label untersucht. Bei einem fehlerfreien Label passiert nichts. Sind
; wenige Fehler vorhanden, wird nach R}ckfrage die Directory gel|scht.
; Bei vielen Fehlern wird ohne R}ckfrage gel|scht.
; Es wird davon ausgegangen, da~ die gesamte Directory in einer Spur des
; logischen Laufwerks liegt (256 Sektoren = 1024 Eintr{ge).
; Die Adressen DrvRd, DrvWr, DrvLbl und DrvQry m}ssen bereits gesetzt sein.

	if	loader		; wird nur im Lader gebraucht

DirIni:	ld	hl,0
	ld	(Track),hl
	ld	(Sector),hl	; Spur und Sektor 0
	ldw	(DMA),Buffer	; Zieladresse: Scratch-Buffer
	ld	hl,(DrvRd)
	call	(hl)		; ersten Sektor lesen
	ld	hl,(DrvLbl)
	ld	de,Buffer
	call	ChkLbl		; Directory Label pr}fen
	ret	z		; Label unver{ndert: nicht l|schen --> Ende
	ld	hl,(DrvQry)
	call	nc,Query	; wenige Fehler: Frage ob l|schen
	ret	nc		; nicht l|schen: Ende Initialisierung
DirIni1:ld	hl,Buffer
	ld	de,Buffer+1
	ld	bc,7Fh
	ld	(hl),0E5h
	ldir			; einen Sektor mit E5 f}llen
	ld	(Buffer+60h),21h ; 1x SFCB vorbereiten
	ld	b,0		; Z{hler f}r 256 Sektoren (ergibt 1024 Eintr.)
DirIni2:push	bc
	ld	a,b
	dec	a		; Sektornummer 255..0
	jr	nz,DirIni3
	ld	hl,(DrvLbl)	; in Sektor 0 Directory Label einsetzen
	ld	de,Buffer
	ld	bc,20h
	ldir			; Directory Label nach Buffer kopieren
DirIni3:ld	(Sector),a
	ld	hl,(DrvWr)
	call	(hl)		; Sektor schreiben (Adressen noch g}ltig)
	pop	bc		; Z{hler
	cp	a,2
	ret	z		; Write-Protected: Abbruch!
	djnz	DirIni2		; bis gesamte Directory initialisiert
	ret			; danach fertig!

; Pr}fen des Directory Label ab (HL) auf ]bereinstimmung mit (DE).
; Bei Gleichheit Z, bei bis zu 5 Fehlern NC, bei mehr Fehlern C.

ChkLbl:	ld	bc,2005h	; L{nge des Labels, Fehlerz{hler
ChkLbl1:ld	a,(de)
	cp	(hl)		; Bytes vergleichen
	jr	z,ChkLbl2
	dec	c		; verschieden: Z{hler -1
ChkLbl2:inc	hl
	inc	de		; Zeiger +1
	djnz	ChkLbl1		; gesamtes Label pr}fen
	ld	a,c
	cp	5
	ret	z		; C unver{ndert: fehlerfrei, also Z
	rlca
	ret			; bei }ber 5 Fehlern CY gesetzt, NZ

; Ausgeben der Frage ab (HL) und Warten auf Antwort (J/N/Y).
; Bei Antwort 'N' CY=0, sonst CY=1.

Query:	call	PMsg		; Frage ausgeben
Query1:	call	ConIn		; Zeicheneingabe abwarten
	and	5Fh		; CAPS
	cp	YesChar
	scf
	jr	z,Query2
	cp	NoChar
	jr	nz,Query1	; andere Eingaben ignorieren
Query2:	push	af		; CY retten
	call	COA		; Zeichen Echo
	pop	af
	ret

; Variablen nur bei Initialisierung (Lader):

DrvRd:	defw	MDrRd		; Treiber-Einsprung Read
DrvWr:	defw	MDrWr		; Treiber-Einsprung Write
DrvLbl:	defw	MDrLbl		; Adresse des korrekten Labels
DrvQry:	defw	MDrQry		; Adresse der R}ckfrage

	endif			; (loader)

	end
